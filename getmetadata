#!/usr/bin/env python3
import json, csv, subprocess

try:
    import xmltodict
    xmltodictFound = True
except ImportError:
    xmltodictFound = False

class Metadata:
    def __init__(self, inputFileName, outputFileName):
        self.cameraMetaData = []
        self.inputFileName = inputFileName
        self.outputFileName = outputFileName
        self.row = []
        self.rawMetaData = []
        self.processedMetaData = []
    def get_exif(self):
        subprocess.Popen("exiftool -j -ext mov -ext mp4 . > " + self.inputFileName, shell=True, stdout=subprocess.PIPE).stdout.read()

    def load_exif(self):
        try:
            with open(self.inputFileName) as f:
                self.cameraMetaData = json.load(f)
        except:
            subprocess.Popen("rm  " + self.inputFileName, shell=True, stdout=subprocess.PIPE).stdout.read()
            print('\N{cross mark}' + '\033[91m' + ' No lumix video files were scanned in this directory')
            exit()

    def xml_to_json(self):
        if('PanasonicSemi-ProMetadataXml' in self.row):
            self.panasonic_xml_metadata = self.row['PanasonicSemi-ProMetadataXml']
            self.panasonic_xml_metadata = xmltodict.parse(self.panasonic_xml_metadata)
            self.row['PanasonicSemi-ProMetadataXml'] = self.panasonic_xml_metadata
            self.row['PanasonicSemi-ProMetadataXml-jpn-JP'] = []
            return self.row

    def process_exif(self):
        for row in self.cameraMetaData:
            try:
                self.row = row
                if(xmltodictFound != False):
                    self.row = self.xml_to_json()
                self.rawMetaData.append(self.row)
                print('\033[92m' + u'\u2713' + ' ' + self.row['FileName'] + '\033[0m')
            except:
                continue

    def map_to_resolve(self):
        for row in self.rawMetaData:
            try:
                if(row.get('DynamicRangeBoost', False) != False):
                    if(row['DynamicRangeBoost'] == 'On'):
                        row['ISO'] = str(row['ISO']) + " DR Boost On"

                #Resolve Mapping
                self.metadata = {
                    'File Name':                row.get('FileName'),
                    'ISO':                      row.get('ISO'),
                    'Shutter Speed':            row.get('ShutterSpeed'),
                    'White Point (Kelvin)':     row.get('ColorTempKelvin'),
                    'Shot Frame Rate':          row.get('VideoFrameRate'),
                    'Camera Type':              row.get('Model'),
                    'Camera Manufacturer':      row.get('Make'), 
                    'Lens Type':                row.get('LensType'),             
                    'Camera Aperture':          row.get('Aperture'),
                    'Focal Point (mm)':         row.get('FocalLength'),
                    'Camera FPS':               row.get('VideoFrameRate'),
                    'Camera Serial #':          row.get('SerialNumber'),
                    'Camera Firmware':          row.get('FirmwareVersion'),
                }
                if(xmltodictFound != False):
                    self.metadata_extended = {
                        'Color Space Notes':    row.get('PanasonicSemi-ProMetadataXml').get('ClipMain').get('UserArea').get('AcquisitionMetadata').get('CameraUnitMetadata').get('Gamma').get('CaptureGamma'), 
                        'Gamma Notes':          row.get('PanasonicSemi-ProMetadataXml').get('ClipMain').get('UserArea').get('AcquisitionMetadata').get('CameraUnitMetadata').get('Gamut').get('CaptureGamut'), 
                        'Codec Rate':           row.get('PanasonicSemi-ProMetadataXml').get('ClipMain').get('ClipContent').get('EssenceList').get('Video').get('Codec').get('@BitRate'), 
                        'Sample Rate (Khz)':    row.get('PanasonicSemi-ProMetadataXml').get('ClipMain').get('ClipContent').get('EssenceList').get('Audio').get('SamplingRate'),
                        'Bit Rate':             row.get('PanasonicSemi-ProMetadataXml').get('ClipMain').get('ClipContent').get('EssenceList').get('Audio').get('BitsPerSample'),
                    }
                    self.metadata.update(self.metadata_extended)
                self.processedMetaData.append(self.metadata)
            except:
                continue

    def write_csv(self):
        with open(self.outputFileName,'w') as f:
            w = csv.writer(f)
            w.writerow(self.processedMetaData[0].keys())
            for row in self.processedMetaData:
                w.writerow(row.values())
            print('Import metadata to resolve using ' + self.outputFileName)

    def clean_up(self):
        subprocess.Popen("rm  " + self.inputFileName, shell=True, stdout=subprocess.PIPE).stdout.read()

def main():
    metadata = Metadata('input-exif.json', 'resolve-metadata.csv')
    metadata.get_exif()
    metadata.load_exif()
    metadata.process_exif()
    metadata.map_to_resolve()
    metadata.write_csv()
    metadata.clean_up()

if __name__ == "__main__":
    main()